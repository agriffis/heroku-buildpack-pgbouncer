#!/usr/bin/env bash
# Adapted from https://github.com/ryandotsmith/nginx-buildpack/

#Generate config files
echo 'buildpack=pgbouncer at=config-gen-start'
source bin/gen-pgbouncer-conf.sh
echo 'buildpack=pgbouncer at=config-gen-end'

#Overwrite config vars with pgbouncer targets
POSTGRES_URLS=${PGBOUNCER_URLS:-DATABASE_URL}

for POSTGRES_URL in $POSTGRES_URLS
do
  echo "Overriding ${POSTGRES_URL} config var"
  eval ${POSTGRES_URL}=\$${POSTGRES_URL}_PGBOUNCER
done

#Use named pipes to detect exit of any sub process
psmgr=/tmp/pgbouncer-buildpack-wait
rm -f $psmgr
mkfifo $psmgr

#Do not exit top script until all sub processes are done
trap '' SIGTERM

#Start stunnel
(
  #We expect stunnel to run in the foreground.
  echo 'buildpack=pgbouncer at=stunnel-start'
  vendor/stunnel/bin/stunnel vendor/stunnel/stunnel-pgbouncer.conf
  echo 'stunnel' >$psmgr
) &

#Start PGBouncer
(
  #We expect pgbouncer to run in the foreground.
  echo 'buildpack=pgbouncer at=pgbouncer-start'

  # Trim the date/time header which heroku provides via logplex
  # 2014-03-03 21:04:52.374 24 LOG C-0x231ae30: dd547vaslqfl1i/uchqgkcomu7enh@127.0.0.1:59534 ACTUAL MESSAGE HERE
  exec > >(sed -ru 's/^....-..-.. +..:..:[0-9.]* +/pgbouncer: /') 2>&1

  vendor/pgbouncer/bin/pgbouncer vendor/pgbouncer/pgbouncer.ini
  echo 'pgbouncer' >$psmgr
) &

#Start App Server
(
  #Take the command passed to this bin and start it.
  #E.g. bin/start-pgbouncer-stunnel bundle exec unicorn -c config/unicorn.rb
  echo "buildpack=pgbouncer at=app-start cmd=$*"
  "$@"
  echo 'app' >$psmgr
) &
subshell=$!

#This read will block the process waiting on a msg to be put into the fifo.
#If any of the processes defined above should exit,
#a msg will be put into the fifo causing the read operation
#to un-block. The process putting the msg into the fifo
#will use it's process name as a msg so that we can print the offending
#process to stdout.
read exit_process <$psmgr
echo "buildpack=pgbouncer at=exit process=$exit_process"

#Clean up any running processes
#SIGTERM application just in case something else crashed
echo "Sending SIGTERM to application"
kill -SIGTERM $subshell

wait %3

echo "Sending SIGINT to pgbouncer"
pkill -SIGINT pgbouncer

echo "Sending SIGINT to stunnel"
pkill -SIGINT stunnel

exit 1
